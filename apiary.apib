FORMAT: 1A
HOST: https://v1.api.dudesolutions.io

GENERATEASYNCCODE: TRUE
USEMETHODPREFIX: TRUE
USEMODELPOSTFIX: FALSE
USECONTROLLERPOSTFIX: FALSE
USEENUMPOSTFIX: FALSE
USECONSTRUCTORSFORCONFIG: TRUE
CSHARPDEFAULTNAMESPACE: DSI.SDK.Event
JAVADEFAULTNAMESPACE: io.dudesolutions.<ApiName>
BRANDLABEL: Dude Solutions, Inc.
USERAGENT: Dude SDK

# Dude Event Api

## Reference
Good reference document: https://raw.githubusercontent.com/apiaryio/api-blueprint/master/examples/Polls%20API.md

## Authentication
*[API Name]* uses OAuth v2 Authorization. First you create a new (or acquire existing) OAuth v2 token using [DudeAuth](https://www.dudeauth.com/).

## Media Types
Where applicable this API uses the *JSON* media-type to represent resources.

Requests and responses with a message-body use plain JSON to set or update resources.

## Error States
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used throughout this API.

In addition to standard response codes the response object returned from the server during an exception event may contain additional information in the following JSON format:

        {
            "message": "SOME MESSAGE",
            "dudeReferenceId": "3523845A-4729-4CCB-9E16-01DEADF6C2DF",
            "stackTrace": "Null, Typically"
        }

# Group Heartbeat

## Heartbeat [/heartbeat]
The heartbeat is exposed and provided to check for availability of the service.
Any response that does not provide a ```200 OK``` response code should be treated as an error.

### GET

+ Response 200 (application/json)
    + Headers
    
            X-Dude-Api-Limit: Unlimited or Number
            X-Dude-Api-Remaining: Unlimited or Number
            X-Dude-Api-Server: Api Server ID
            
    + Attributes (Heartbeat)
    

# Group Schedule

## Schedule Collection [/accounts/{accountId}/scheduledata{?page,pagesize,orderby}]

+ Parameters
    + accountId: 1234567890 (required, number) - ID of the account in the form of an integer
    + page: 1 (number, optional) - The page to request from the collection.
    + pagesize: 1000 (number, optional) - The number of records to load in a page from the collection.
    + orderby: Quantity asc (string, optional) - A string describing the ordering to perform on the collection.
    
### GET

+ Response 200 (application/json)
    + Attributes (Base Collection Response)
        + `data` (array[Schedule Data], required)
        
### POST

+ Request
    + Attributes (Schedule Data)
 
+ Response 201 (application/json)
    + Attributes (Schedule Data)
    
## Schedule Detail [/accounts/{accountId}/scheduledata/{scheduleId}]

+ Parameters
    + accountId: 1234567890 (number, required) - ID of the account in the form of an integer
    + scheduleId: 145 (number, required) - The ID of the schedule
    
### GET

+ Response 200 (application/json)
    + Attributes (Schedule Data)
    
### PUT

+ Request
    + Attributes (Schedule Data Update)
    
+ Response 200 (application/json)
    + Attributes (Schedule Data)

# Data Structures

## Heartbeat (object)
+ `vitalCheck`: true (boolean, required) - Vital check to ensure something is online.

## Base Collection Response (object)
+ `page`: 1 (number, required) - The current page provided in the response data.
+ `pageSize`: 1000 (number, required) - The page size returned in the response data.
+ `dataSize`: 1000 (number, required) - The total records returned in the response.
+ `total`: 2000 (number, required) - The total number of records available in the collection.

## Base User Object (object)
+ `id`: 1 (number, required) - The ID of the user.
+ `firstName`: "John" (string, required) - The first name of the user.
+ `lastName`: "Smith" (string, required) - The last name of the user.
+ `email`: "john.smith@dudesolutions.io" (string, required) - The email address of the user.

## Base Client Object (object)
+ `id`: 1 (number, required) - The ID of the API client.

## Recurrence Pattern (object)
+ `time`: `03:00:00` (string, optional) - The time of the recurrence
+ `dayOfMonth`: 24 (number, optional) - The day of the month that applies to the recurrence
+ `daysOfWeek` (array[number], optional) - The days of week that the recurrence applies to
+ `every`: 2 (number, optional) - How often it repeats
+ `month`: 12 (number, optional) - The month that the pattern recurs
+ `period`: `Day` (string, optional) - The period
+ `ordinal`: `1` (string, optional) - The integer value relating to an ordinal number (eg: 1 for 1st)
+ `startDateTime`: "2015-10-01T00:00:00Z" (string, optional) - The date/time that the recurrence pattern starts
+ `endDateTime`: "2016-10-01T00:00:00Z" (string, optional) - The date/time that the recurrence pattern terminates
+ `targetDate`: "2016-10-01T00:00:00Z" (string, optional) - The target generation date for the recurrence pattern
+ `cronex`: "0 0 12 * * ?" (string, optional) - The cron expression. This is a system generated expression based on the recurrence pattern.

## Schedule Data (object)
+ `id`: 1 (number) - the ID for the schedule object
+ `recurrencePattern` (Recurrence Pattern, required) - The recurrence pattern
+ `nextRunDateTime`: `2015-01-01T00:00:00.123Z` (string, optional) - The next date and time the schedule recurrence pattern will be executed
+ `lastRunDateTime`: `2015-01-01T00:00:00.123Z` (string, optional) - The last date and time the schedule recurrence pattern was executed.
+ `finalRunDateTime`: `2015-01-01T00:00:00.123Z` (string, optional) - The last date and time the schedule recurrence pattern will be executed.
+ `isActive`: 1 (boolean, required) - Boolean value to indicate whether the schedule will continue to generate based on its recurrence pattern

## Schedule Data Update (Schedule Data)
+ `id`: 1 (number, required) - The ID for the object
